# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x]
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: install project dependencies
      run: yarn install --frozen-lockfile
    - name: build
      run: yarn build
    - name: test
      run: yarn test
    - name: end-to-end test
      run: yarn test:e2e
  test-releasability:
    runs-on: ubuntu-latest
    needs: test
    outputs:
      releaseExitCode: ${{ steps.checkReleasability.outputs.releasable }}
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: check relesability
      id: checkReleasability
      continue-on-error: true
      run: |
        PREVIOUS_VERSION=$(npx https://github.com:janhalama/keep-a-changelog.git --latest-release)
        $(npx https://github.com:janhalama/keep-a-changelog.git --release | tail -1)
        NEW_VERSION=$(npx https://github.com:janhalama/keep-a-changelog.git --latest-release)
        echo $PREVIOUS_VERSION
        echo $NEW_VERSION
        echo $($PREVIOUS_VERSION -ne $NEW_VERSION)
        echo "::set-output name=releasable::$($PREVIOUS_VERSION -ne $NEW_VERSION)"
  release:
    runs-on: ubuntu-latest
    needs: test-releasability
    if: needs.test-releasability.outputs.releasable == true
    steps:
    - name: checkout
      uses: actions/checkout@v2
    - name: update changelog
      run: |
        echo ${{needs.test-releasability.outputs.releasable}}
        echo ${{needs.test-releasability.result}}
        npx https://github.com:janhalama/keep-a-changelog.git --release
    - name: get new version
      run: |
        echo "NEW_VERSION=$(npx https://github.com:janhalama/keep-a-changelog.git --latest-release)" >> $GITHUB_ENV
    - name: commit changelog changes
      run: |
        git config --global user.email "mail@janhalama.cz"
        git config --global user.name "GitHub Actions build job"
        git add "CHANGELOG.md"
        git commit -m "docs: update changelog"
    - name: create tag
      run: |
        echo ${NEW_VERSION}
        yarn version --new-version ${NEW_VERSION} 
    - name: push changes
      env:
        GITHUB_TOKEN: ${{ secrets.JANS_GITHUB_TOKEN }}
      run: |
        git push origin && git push --tags